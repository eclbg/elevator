# -----------------------------------------------------------------------------
# The Testing Challenge
#
# One issue with the elevator software is the problem of testing it.
# Yes, you can probably write some unit tests for selected parts of
# your state machine.  However, can you be sure that you've tested
# every possible scenario of events?  Also, just what kinds of things
# can go wrong with an elevator anyways?
#
# In answering that last question, there are probably a few obvious
# "safety" issues you could envision. For example, the elevator should
# probably never move with the doors open.  Likewise, it probably
# shouldn't try to move up when already on the top floor (or down when
# at the bottom).  Other kinds of problems are more subtle.  For
# instance, you probably wouldn't want the elevator software to
# deadlock (i.e., just freeze with nothing happening at all).  Or have
# a situation where kids on two floors could launch a denial of
# service attack on the elevator by constantly pressing buttons and
# making the elevator ping-pong back and forth between just those
# floors.
#
# One possible testing scenario might involve a kind of "random walk."
# Create an elevator.  Then just start executing events at random and
# watch what happens.  As analogy, imagine you've unleashed an entire
# school of 3rd graders into the building and told them to go press
# random buttons inside the elevator and out in the hallway.  Watch
# what happens.  Does the elevator shoot through the roof?  Chop kids
# in half?
# 
# Another way to explore this space is to write a elevator simulator.
# Think of it as the "Game of Elevator."  The game starts with the
# elevator in some starting state.  From that starting state, any
# event could happen (i.e., any button could be pressed).  Each of
# these cause the elevator to change to a new state.  From all of
# these new states, you repeat the process to get more states and so
# on.  It's like exploring all possible moves that could occur in a
# board game.  Can you write something like this for the elevator?
# That is, can you write a simulation that runs the elevator software
# through every possible combination of runtime state, checking for
# potential problems?  Unlike the previous idea, this involves no
# randomness--instead every possible state is eventually explored.
#
# Your mission, should you choose to accept it, is to come up with
# some kind of test strategy for the elevator using one, both, or
# some other similar idea as described here.

